syntax = "proto3";

option go_package = "discovery";

service HospitalDiscovery {
  rpc GetInfo(InfoRequest) returns (InfoResponse) {}
  rpc ListHospitals(ListRequest) returns (ListResponse) {}
  rpc GetKey(GetKeyRequest) returns (GetKeyResponse) {}
  rpc PutKey(PutKeyRequest) returns (PutKeyResponse) {}
}

message Hospital {
  string id = 1;            // Unique ID for hospital
  string name = 2;          // Name representation of hospital
  int64 registeredTime = 3; // UNIX timestamp when the hospital was registered
  string gatewayAddr = 4;   // Address to the hospital's gateway
  bytes publicKey = 5;      // Public key of the hospital for any signed
                            // communication
  string consistentStorageAddr = 6; // Address to hospital's consistent storage
  repeated DiscoveryKey publicKeys = 7; // List of public keys for the hospital
}

message InfoRequest {}

message InfoResponse {
  int64 registeredTime = 1; // UNIX timestamp when the hospital was registered
  string id = 2;            // Unique ID for hospital
  string name = 3;          // Name representation of hospital
  bytes privateKey = 4;     // Private key to be used for any signed
                            // communication
}

message ListRequest {}

message ListResponse { repeated Hospital hospitals = 1; }

message DiscoveryKey {
  string name = 1;   // Name of key
  bytes value = 2;   // Value of key
  bool public = 3;   // Whether the key is a public key
                     // (should be false for asymmetric)
  string scheme = 4; // Optional field describing the scheme
                     // of the key (e.g. rsa, ed25519)
}

message GetKeyRequest {
  string name = 1; // Name of key to look up
  bool public = 2; // Whether to retrieve the public or private key
}

message GetKeyResponse {
  bool found = 1;
  DiscoveryKey key = 2;
}

message PutKeyRequest { DiscoveryKey key = 1; }

message PutKeyResponse {
  bool ok = 1;
  string error = 2;
}
